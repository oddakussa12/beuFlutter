
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '4'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"


// App Sign
Properties jskProperties = new Properties()
jskProperties.load(rootProject.file("keystore.properties").newDataInputStream())
def jksPath = jskProperties.getProperty("jksPath")
def jksFile = file(jksPath)
def password = jskProperties.getProperty("password")
def alias = jskProperties.getProperty("alias")
def aliasPassword = jskProperties.getProperty("aliasPassword")


android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.xmt.beu.applite"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
            abiFilters 'arm64-v8a' //, 'armeabi-v7a'
        }
    }

    signingConfigs {

        debug {
            println(": signingConfigs.debug")

            storeFile jksFile
            storePassword password
            keyAlias alias
            keyPassword aliasPassword
        }

        release {
            println(": signingConfigs.release")

            storeFile jksFile
            storePassword password
            keyAlias alias
            keyPassword aliasPassword
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.debug

            minifyEnabled false
            // 是否去除无效的资源文件
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            // 是否去除无效的资源文件
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            /*applicationVariants.all { variant ->
                variant.outputs.each { output ->

                    def buildTypeName = variant.buildType.name
                    // 时间戳
                    SimpleDateFormat sdf = DateFormat.getDateInstance()
                    sdf.applyPattern("yyyyMMdd-HHmmss")
                    def timeStamp = sdf.format(System.currentTimeMillis())
                    // def fileName = "${variant.flavorName}/${buildTypeName}/${timeStamp}_${project.ext.projectName}_${variant.flavorName}_${buildTypeName}_V${variant.versionName}.apk"
                    def fileName = "${variant.flavorName}/${buildTypeName}/${timeStamp}_beUDelivery_${buildTypeName}_V${variant.versionName}.apk"

                    println("OutputFileName: " + fileName);

                    output.outputFileName = fileName
                }
            }*/
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
